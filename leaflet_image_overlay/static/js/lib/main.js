// Generated by CoffeeScript 1.8.0
(function() {
  var config, image_url;

  config = {};

  config.MAP_CENTER = [38.907, -77.0368];

  config.MAP_ZOOM = 11;

  config.DEFAULT_IMAGE_URL = '/static/images/lenfant_map.jpg';

  config.DEFAULT_OPACITY = 0.5;

  config.DEFAULT_BOUNDS = [[config.MAP_CENTER[0] - 0.1, config.MAP_CENTER[1] - 0.1], [config.MAP_CENTER[0] + 0.1, config.MAP_CENTER[1] + 0.1]];

  config.NOMINATIM_URL = 'http://nominatim.openstreetmap.org/';

  image_url = config.DEFAULT_IMAGE_URL;

  $(document).ready(function() {
    var OverlayEditor, changeImagePopup, map, overlayEdit, sidebar, sidebarOpenControl, slider;
    map = L.mapbox.map('map', 'examples.map-i86nkdio', {
      zoomControl: false
    });
    map.setView(config.MAP_CENTER, config.MAP_ZOOM);
    map.on('mousedown', function(e) {
      return map.dragging.enable();
    });
    OverlayEditor = (function() {
      function OverlayEditor(imgUrl, map, bounds, overlayOptions) {
        var latLngBounds, thisOverlayEditor;
        this.imgUrl = imgUrl;
        this.map = map;
        this.bounds = bounds;
        this.overlayOptions = overlayOptions;
        this.overlay = L.imageOverlay(this.imgUrl, this.bounds, this.overlayOptions).addTo(this.map);
        latLngBounds = L.latLngBounds(this.bounds);
        this.ne = L.marker(latLngBounds.getNorthEast(), {
          draggable: true
        }).addTo(this.map);
        this.nw = L.marker(latLngBounds.getNorthWest(), {
          draggable: true
        }).addTo(this.map);
        this.se = L.marker(latLngBounds.getSouthEast(), {
          draggable: true
        }).addTo(this.map);
        this.sw = L.marker(latLngBounds.getSouthWest(), {
          draggable: true
        }).addTo(this.map);
        thisOverlayEditor = this;
        this.ne.on('drag', function(e) {
          thisOverlayEditor.bounds[1] = [e.target._latlng.lat, e.target._latlng.lng];
          return thisOverlayEditor.updateOverlay(thisOverlayEditor.bounds);
        });
        this.nw.on('drag', function(e) {
          thisOverlayEditor.bounds[1][0] = e.target._latlng.lat;
          thisOverlayEditor.bounds[0][1] = e.target._latlng.lng;
          return thisOverlayEditor.updateOverlay(thisOverlayEditor.bounds);
        });
        this.se.on('drag', function(e) {
          thisOverlayEditor.bounds[0][0] = e.target._latlng.lat;
          thisOverlayEditor.bounds[1][1] = e.target._latlng.lng;
          return thisOverlayEditor.updateOverlay(thisOverlayEditor.bounds);
        });
        this.sw.on('drag', function(e) {
          thisOverlayEditor.bounds[0] = [e.target._latlng.lat, e.target._latlng.lng];
          return thisOverlayEditor.updateOverlay(thisOverlayEditor.bounds);
        });
        this.mouseDown = false;
        this.lastLatLng = config.MAP_CENTER;
        $('.leaflet-overlay-pane').mousedown(function(e) {
          var lastLatLng, m, _i, _len, _ref, _results;
          lastLatLng = thisOverlayEditor.map.mouseEventToLatLng(e);
          thisOverlayEditor.mouseDown = true;
          thisOverlayEditor.map.dragging.disable();
          thisOverlayEditor.lastLatLng = thisOverlayEditor.map.mouseEventToLatLng(e);
          _ref = [thisOverlayEditor.ne, thisOverlayEditor.nw, thisOverlayEditor.se, thisOverlayEditor.sw];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            m = _ref[_i];
            _results.push(m.closePopup());
          }
          return _results;
        });
        $('#map').mousemove(function(e) {
          var currentLatLng, dLat, dLng;
          if (thisOverlayEditor.mouseDown) {
            thisOverlayEditor.map.dragging.disable();
            currentLatLng = thisOverlayEditor.map.mouseEventToLatLng(e);
            dLat = currentLatLng.lat - thisOverlayEditor.lastLatLng.lat;
            dLng = currentLatLng.lng - thisOverlayEditor.lastLatLng.lng;
            thisOverlayEditor.bounds[0][0] += dLat;
            thisOverlayEditor.bounds[1][0] += dLat;
            thisOverlayEditor.bounds[0][1] += dLng;
            thisOverlayEditor.bounds[1][1] += dLng;
            thisOverlayEditor.updateOverlay(thisOverlayEditor.bounds);
            thisOverlayEditor.lastLatLng = currentLatLng;
            return thisOverlayEditor.map.dragging.enable();
          }
        });
        $('.leaflet-overlay-pane').mouseup(function() {
          thisOverlayEditor.mouseDown = false;
          return thisOverlayEditor.map.dragging.enable();
        });
      }

      OverlayEditor.prototype.updateCornerMarkers = function(bounds) {
        var latLngBounds, m, _i, _len, _ref, _results;
        this.bounds = bounds;
        latLngBounds = L.latLngBounds(bounds);
        this.ne.setLatLng(latLngBounds.getNorthEast());
        this.nw.setLatLng(latLngBounds.getNorthWest());
        this.se.setLatLng(latLngBounds.getSouthEast());
        this.sw.setLatLng(latLngBounds.getSouthWest());
        $('#northeast_input_lat').val(this.ne.getLatLng().lat);
        $('#northeast_input_lng').val(this.ne.getLatLng().lng);
        $('#southwest_input_lat').val(this.sw.getLatLng().lat);
        $('#southwest_input_lng').val(this.sw.getLatLng().lng);
        _ref = [this.ne, this.sw, this.se, this.nw];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          _results.push(m.bindPopup(m.getLatLng().lat + ', ' + m.getLatLng().lng));
        }
        return _results;
      };

      OverlayEditor.prototype.updateOverlay = function(bounds) {
        this.bounds = bounds;
        map.removeLayer(this.overlay);
        this.overlay = L.imageOverlay(this.imgUrl, this.bounds, this.overlayOptions).addTo(this.map);
        return this.updateCornerMarkers(bounds);
      };

      return OverlayEditor;

    })();
    overlayEdit = null;
    changeImagePopup = L.popup({
      closeOnClick: false,
      closeButton: false
    });
    changeImagePopup.setLatLng(config.MAP_CENTER);
    changeImagePopup.setContent('<form id="popupForm"><input type="text" id="image_url_input" value="http://dcsymbols.com/chronology/dc1820.jpg"><input type="text" id="location_input" value="district of columbia"><input type="submit" value="submit"></form>');
    changeImagePopup.openOn(map);
    $('#popupForm').submit(function(e) {
      var params;
      e.preventDefault();
      params = {
        q: $('#location_input').val(),
        format: 'json'
      };
      return $.getJSON(config.NOMINATIM_URL, params, function(loc) {
        var bounds, f, northeast, southwest;
        if ((loc != null) && loc.length > 0) {
          map.panTo([loc[0].lat, loc[0].lon]);
          bounds = (function() {
            var _i, _len, _ref, _results;
            _ref = loc[0].boundingbox;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              f = _ref[_i];
              _results.push(parseFloat(f));
            }
            return _results;
          })();
          northeast = [bounds[1], bounds[3]];
          southwest = [bounds[0], bounds[2]];
          overlayEdit = new OverlayEditor($('#image_url_input').val(), map, [southwest, northeast], {
            opacity: 0.5
          });
          overlayEdit.lastLatLng = [loc[0].lat, loc[0].lon];
          overlayEdit.updateOverlay;
          map.closePopup(changeImagePopup);
          return map.fitBounds([southwest, northeast], {
            padding: [100, 100]
          });
        }
      });
    });
    sidebar = L.control.sidebar('sidebar', {
      position: 'left',
      autoPan: false
    });
    map.addControl(sidebar);
    slider = $('#slider').slider({
      min: 0,
      max: 1.0,
      step: 0.01,
      value: 0.5
    });
    slider.on('slide', function(e) {
      overlayEdit.overlayOptions = {
        opacity: e.value
      };
      return overlayEdit.updateOverlay(overlayEdit.bounds);
    });
    sidebar.hide();
    $('.leaflet-sidebar').css('width', 300);
    L.Control.SidebarOpen = L.Control.extend({
      options: {
        position: 'topleft'
      },
      onAdd: function(map) {
        var controlDiv, controlUI;
        controlDiv = L.DomUtil.create('div', 'leaflet-control-sidebar-open');
        L.DomEvent.addListener(controlDiv, 'click', L.DomEvent.stopPropagation).addListener(controlDiv, 'click', L.DomEvent.preventDefault).addListener(controlDiv, 'click', function() {
          return sidebar.toggle();
        });
        controlUI = L.DomUtil.create('div', 'leaflet-control-sidebar-open-interior', controlDiv);
        controlUI.title = 'Map Commands';
        return controlDiv;
      }
    });
    sidebarOpenControl = new L.Control.SidebarOpen();
    sidebar.on('show', function() {
      return sidebarOpenControl.removeFrom(map);
    });
    sidebar.on('hidden', function() {
      sidebarOpenControl.addTo(map);
      return $('.leaflet-control-sidebar-open-interior').append('<button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-cog"></span> </button>');
    });
    map.addControl(sidebarOpenControl);
    $('.leaflet-control-sidebar-open-interior').append('<button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-cog"></span> </button>');
    return $('.latlon-input').bind('keypress', function(e) {
      var neLatLng, swLatLng;
      if (e.keyCode === 13 || e.which === 13) {
        neLatLng = [parseFloat($('#northeast_input_lat').val()), parseFloat($('#northeast_input_lng').val())];
        swLatLng = [parseFloat($('#southwest_input_lat').val()), parseFloat($('#southwest_input_lng').val())];
        return overlayEdit.updateOverlay([swLatLng, neLatLng]);
      }
    });
  });

}).call(this);
